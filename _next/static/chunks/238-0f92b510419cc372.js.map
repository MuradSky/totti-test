{"version":3,"file":"static/chunks/238-0f92b510419cc372.js","mappings":"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","sources":["webpack://_N_E/./node_modules/dompurify/dist/purify.js","webpack://_N_E/./node_modules/isomorphic-dompurify/browser.js","webpack://_N_E/<anon>"],"sourcesContent":["/*! @license DOMPurify 3.0.6 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/3.0.6/LICENSE */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.DOMPurify = factory());\n})(this, (function () { 'use strict';\n\n  const {\n    entries,\n    setPrototypeOf,\n    isFrozen,\n    getPrototypeOf,\n    getOwnPropertyDescriptor\n  } = Object;\n  let {\n    freeze,\n    seal,\n    create\n  } = Object; // eslint-disable-line import/no-mutable-exports\n\n  let {\n    apply,\n    construct\n  } = typeof Reflect !== 'undefined' && Reflect;\n\n  if (!freeze) {\n    freeze = function freeze(x) {\n      return x;\n    };\n  }\n\n  if (!seal) {\n    seal = function seal(x) {\n      return x;\n    };\n  }\n\n  if (!apply) {\n    apply = function apply(fun, thisValue, args) {\n      return fun.apply(thisValue, args);\n    };\n  }\n\n  if (!construct) {\n    construct = function construct(Func, args) {\n      return new Func(...args);\n    };\n  }\n\n  const arrayForEach = unapply(Array.prototype.forEach);\n  const arrayPop = unapply(Array.prototype.pop);\n  const arrayPush = unapply(Array.prototype.push);\n  const stringToLowerCase = unapply(String.prototype.toLowerCase);\n  const stringToString = unapply(String.prototype.toString);\n  const stringMatch = unapply(String.prototype.match);\n  const stringReplace = unapply(String.prototype.replace);\n  const stringIndexOf = unapply(String.prototype.indexOf);\n  const stringTrim = unapply(String.prototype.trim);\n  const regExpTest = unapply(RegExp.prototype.test);\n  const typeErrorCreate = unconstruct(TypeError);\n  /**\n   * Creates a new function that calls the given function with a specified thisArg and arguments.\n   *\n   * @param {Function} func - The function to be wrapped and called.\n   * @returns {Function} A new function that calls the given function with a specified thisArg and arguments.\n   */\n\n  function unapply(func) {\n    return function (thisArg) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return apply(func, thisArg, args);\n    };\n  }\n  /**\n   * Creates a new function that constructs an instance of the given constructor function with the provided arguments.\n   *\n   * @param {Function} func - The constructor function to be wrapped and called.\n   * @returns {Function} A new function that constructs an instance of the given constructor function with the provided arguments.\n   */\n\n\n  function unconstruct(func) {\n    return function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return construct(func, args);\n    };\n  }\n  /**\n   * Add properties to a lookup table\n   *\n   * @param {Object} set - The set to which elements will be added.\n   * @param {Array} array - The array containing elements to be added to the set.\n   * @param {Function} transformCaseFunc - An optional function to transform the case of each element before adding to the set.\n   * @returns {Object} The modified set with added elements.\n   */\n\n\n  function addToSet(set, array) {\n    let transformCaseFunc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : stringToLowerCase;\n\n    if (setPrototypeOf) {\n      // Make 'in' and truthy checks like Boolean(set.constructor)\n      // independent of any properties defined on Object.prototype.\n      // Prevent prototype setters from intercepting set as a this value.\n      setPrototypeOf(set, null);\n    }\n\n    let l = array.length;\n\n    while (l--) {\n      let element = array[l];\n\n      if (typeof element === 'string') {\n        const lcElement = transformCaseFunc(element);\n\n        if (lcElement !== element) {\n          // Config presets (e.g. tags.js, attrs.js) are immutable.\n          if (!isFrozen(array)) {\n            array[l] = lcElement;\n          }\n\n          element = lcElement;\n        }\n      }\n\n      set[element] = true;\n    }\n\n    return set;\n  }\n  /**\n   * Shallow clone an object\n   *\n   * @param {Object} object - The object to be cloned.\n   * @returns {Object} A new object that copies the original.\n   */\n\n\n  function clone(object) {\n    const newObject = create(null);\n\n    for (const [property, value] of entries(object)) {\n      if (getOwnPropertyDescriptor(object, property) !== undefined) {\n        newObject[property] = value;\n      }\n    }\n\n    return newObject;\n  }\n  /**\n   * This method automatically checks if the prop is function or getter and behaves accordingly.\n   *\n   * @param {Object} object - The object to look up the getter function in its prototype chain.\n   * @param {String} prop - The property name for which to find the getter function.\n   * @returns {Function} The getter function found in the prototype chain or a fallback function.\n   */\n\n  function lookupGetter(object, prop) {\n    while (object !== null) {\n      const desc = getOwnPropertyDescriptor(object, prop);\n\n      if (desc) {\n        if (desc.get) {\n          return unapply(desc.get);\n        }\n\n        if (typeof desc.value === 'function') {\n          return unapply(desc.value);\n        }\n      }\n\n      object = getPrototypeOf(object);\n    }\n\n    function fallbackValue(element) {\n      console.warn('fallback value for', element);\n      return null;\n    }\n\n    return fallbackValue;\n  }\n\n  const html$1 = freeze(['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr']); // SVG\n\n  const svg$1 = freeze(['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'style', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'view', 'vkern']);\n  const svgFilters = freeze(['feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feDropShadow', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence']); // List of SVG elements that are disallowed by default.\n  // We still need to know them so that we can do namespace\n  // checks properly in case one wants to add them to\n  // allow-list.\n\n  const svgDisallowed = freeze(['animate', 'color-profile', 'cursor', 'discard', 'font-face', 'font-face-format', 'font-face-name', 'font-face-src', 'font-face-uri', 'foreignobject', 'hatch', 'hatchpath', 'mesh', 'meshgradient', 'meshpatch', 'meshrow', 'missing-glyph', 'script', 'set', 'solidcolor', 'unknown', 'use']);\n  const mathMl$1 = freeze(['math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mspace', 'msqrt', 'mstyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover', 'mprescripts']); // Similarly to SVG, we want to know all MathML elements,\n  // even those that we disallow by default.\n\n  const mathMlDisallowed = freeze(['maction', 'maligngroup', 'malignmark', 'mlongdiv', 'mscarries', 'mscarry', 'msgroup', 'mstack', 'msline', 'msrow', 'semantics', 'annotation', 'annotation-xml', 'mprescripts', 'none']);\n  const text = freeze(['#text']);\n\n  const html = freeze(['accept', 'action', 'align', 'alt', 'autocapitalize', 'autocomplete', 'autopictureinpicture', 'autoplay', 'background', 'bgcolor', 'border', 'capture', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'controls', 'controlslist', 'coords', 'crossorigin', 'datetime', 'decoding', 'default', 'dir', 'disabled', 'disablepictureinpicture', 'disableremoteplayback', 'download', 'draggable', 'enctype', 'enterkeyhint', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'inputmode', 'integrity', 'ismap', 'kind', 'label', 'lang', 'list', 'loading', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'minlength', 'multiple', 'muted', 'name', 'nonce', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'playsinline', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'role', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'sizes', 'span', 'srclang', 'start', 'src', 'srcset', 'step', 'style', 'summary', 'tabindex', 'title', 'translate', 'type', 'usemap', 'valign', 'value', 'width', 'xmlns', 'slot']);\n  const svg = freeze(['accent-height', 'accumulate', 'additive', 'alignment-baseline', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'class', 'clip', 'clippathunits', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'filterunits', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'height', 'href', 'id', 'image-rendering', 'in', 'in2', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lang', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'media', 'method', 'mode', 'min', 'name', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'preserveaspectratio', 'primitiveunits', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'result', 'rotate', 'scale', 'seed', 'shape-rendering', 'specularconstant', 'specularexponent', 'spreadmethod', 'startoffset', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'style', 'surfacescale', 'systemlanguage', 'tabindex', 'targetx', 'targety', 'transform', 'transform-origin', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'type', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'version', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'width', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan']);\n  const mathMl = freeze(['accent', 'accentunder', 'align', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'dir', 'display', 'displaystyle', 'encoding', 'fence', 'frame', 'height', 'href', 'id', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset', 'width', 'xmlns']);\n  const xml = freeze(['xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink']);\n\n  const MUSTACHE_EXPR = seal(/\\{\\{[\\w\\W]*|[\\w\\W]*\\}\\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode\n\n  const ERB_EXPR = seal(/<%[\\w\\W]*|[\\w\\W]*%>/gm);\n  const TMPLIT_EXPR = seal(/\\${[\\w\\W]*}/gm);\n  const DATA_ATTR = seal(/^data-[\\-\\w.\\u00B7-\\uFFFF]/); // eslint-disable-line no-useless-escape\n\n  const ARIA_ATTR = seal(/^aria-[\\-\\w]+$/); // eslint-disable-line no-useless-escape\n\n  const IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i // eslint-disable-line no-useless-escape\n  );\n  const IS_SCRIPT_OR_DATA = seal(/^(?:\\w+script|data):/i);\n  const ATTR_WHITESPACE = seal(/[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205F\\u3000]/g // eslint-disable-line no-control-regex\n  );\n  const DOCTYPE_NAME = seal(/^html$/i);\n\n  var EXPRESSIONS = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    MUSTACHE_EXPR: MUSTACHE_EXPR,\n    ERB_EXPR: ERB_EXPR,\n    TMPLIT_EXPR: TMPLIT_EXPR,\n    DATA_ATTR: DATA_ATTR,\n    ARIA_ATTR: ARIA_ATTR,\n    IS_ALLOWED_URI: IS_ALLOWED_URI,\n    IS_SCRIPT_OR_DATA: IS_SCRIPT_OR_DATA,\n    ATTR_WHITESPACE: ATTR_WHITESPACE,\n    DOCTYPE_NAME: DOCTYPE_NAME\n  });\n\n  const getGlobal = function getGlobal() {\n    return typeof window === 'undefined' ? null : window;\n  };\n  /**\n   * Creates a no-op policy for internal use only.\n   * Don't export this function outside this module!\n   * @param {?TrustedTypePolicyFactory} trustedTypes The policy factory.\n   * @param {HTMLScriptElement} purifyHostElement The Script element used to load DOMPurify (to determine policy name suffix).\n   * @return {?TrustedTypePolicy} The policy created (or null, if Trusted Types\n   * are not supported or creating the policy failed).\n   */\n\n\n  const _createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, purifyHostElement) {\n    if (typeof trustedTypes !== 'object' || typeof trustedTypes.createPolicy !== 'function') {\n      return null;\n    } // Allow the callers to control the unique policy name\n    // by adding a data-tt-policy-suffix to the script element with the DOMPurify.\n    // Policy creation with duplicate names throws in Trusted Types.\n\n\n    let suffix = null;\n    const ATTR_NAME = 'data-tt-policy-suffix';\n\n    if (purifyHostElement && purifyHostElement.hasAttribute(ATTR_NAME)) {\n      suffix = purifyHostElement.getAttribute(ATTR_NAME);\n    }\n\n    const policyName = 'dompurify' + (suffix ? '#' + suffix : '');\n\n    try {\n      return trustedTypes.createPolicy(policyName, {\n        createHTML(html) {\n          return html;\n        },\n\n        createScriptURL(scriptUrl) {\n          return scriptUrl;\n        }\n\n      });\n    } catch (_) {\n      // Policy creation failed (most likely another DOMPurify script has\n      // already run). Skip creating the policy, as this will only cause errors\n      // if TT are enforced.\n      console.warn('TrustedTypes policy ' + policyName + ' could not be created.');\n      return null;\n    }\n  };\n\n  function createDOMPurify() {\n    let window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();\n\n    const DOMPurify = root => createDOMPurify(root);\n    /**\n     * Version label, exposed for easier checks\n     * if DOMPurify is up to date or not\n     */\n\n\n    DOMPurify.version = '3.0.6';\n    /**\n     * Array of elements that DOMPurify removed during sanitation.\n     * Empty if nothing was removed.\n     */\n\n    DOMPurify.removed = [];\n\n    if (!window || !window.document || window.document.nodeType !== 9) {\n      // Not running in a browser, provide a factory function\n      // so that you can pass your own Window\n      DOMPurify.isSupported = false;\n      return DOMPurify;\n    }\n\n    let {\n      document\n    } = window;\n    const originalDocument = document;\n    const currentScript = originalDocument.currentScript;\n    const {\n      DocumentFragment,\n      HTMLTemplateElement,\n      Node,\n      Element,\n      NodeFilter,\n      NamedNodeMap = window.NamedNodeMap || window.MozNamedAttrMap,\n      HTMLFormElement,\n      DOMParser,\n      trustedTypes\n    } = window;\n    const ElementPrototype = Element.prototype;\n    const cloneNode = lookupGetter(ElementPrototype, 'cloneNode');\n    const getNextSibling = lookupGetter(ElementPrototype, 'nextSibling');\n    const getChildNodes = lookupGetter(ElementPrototype, 'childNodes');\n    const getParentNode = lookupGetter(ElementPrototype, 'parentNode'); // As per issue #47, the web-components registry is inherited by a\n    // new document created via createHTMLDocument. As per the spec\n    // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)\n    // a new empty registry is used when creating a template contents owner\n    // document, so we use that as our parent document to ensure nothing\n    // is inherited.\n\n    if (typeof HTMLTemplateElement === 'function') {\n      const template = document.createElement('template');\n\n      if (template.content && template.content.ownerDocument) {\n        document = template.content.ownerDocument;\n      }\n    }\n\n    let trustedTypesPolicy;\n    let emptyHTML = '';\n    const {\n      implementation,\n      createNodeIterator,\n      createDocumentFragment,\n      getElementsByTagName\n    } = document;\n    const {\n      importNode\n    } = originalDocument;\n    let hooks = {};\n    /**\n     * Expose whether this browser supports running the full DOMPurify.\n     */\n\n    DOMPurify.isSupported = typeof entries === 'function' && typeof getParentNode === 'function' && implementation && implementation.createHTMLDocument !== undefined;\n    const {\n      MUSTACHE_EXPR,\n      ERB_EXPR,\n      TMPLIT_EXPR,\n      DATA_ATTR,\n      ARIA_ATTR,\n      IS_SCRIPT_OR_DATA,\n      ATTR_WHITESPACE\n    } = EXPRESSIONS;\n    let {\n      IS_ALLOWED_URI: IS_ALLOWED_URI$1\n    } = EXPRESSIONS;\n    /**\n     * We consider the elements and attributes below to be safe. Ideally\n     * don't add any new ones but feel free to remove unwanted ones.\n     */\n\n    /* allowed element names */\n\n    let ALLOWED_TAGS = null;\n    const DEFAULT_ALLOWED_TAGS = addToSet({}, [...html$1, ...svg$1, ...svgFilters, ...mathMl$1, ...text]);\n    /* Allowed attribute names */\n\n    let ALLOWED_ATTR = null;\n    const DEFAULT_ALLOWED_ATTR = addToSet({}, [...html, ...svg, ...mathMl, ...xml]);\n    /*\n     * Configure how DOMPUrify should handle custom elements and their attributes as well as customized built-in elements.\n     * @property {RegExp|Function|null} tagNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any custom elements)\n     * @property {RegExp|Function|null} attributeNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any attributes not on the allow list)\n     * @property {boolean} allowCustomizedBuiltInElements allow custom elements derived from built-ins if they pass CUSTOM_ELEMENT_HANDLING.tagNameCheck. Default: `false`.\n     */\n\n    let CUSTOM_ELEMENT_HANDLING = Object.seal(create(null, {\n      tagNameCheck: {\n        writable: true,\n        configurable: false,\n        enumerable: true,\n        value: null\n      },\n      attributeNameCheck: {\n        writable: true,\n        configurable: false,\n        enumerable: true,\n        value: null\n      },\n      allowCustomizedBuiltInElements: {\n        writable: true,\n        configurable: false,\n        enumerable: true,\n        value: false\n      }\n    }));\n    /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */\n\n    let FORBID_TAGS = null;\n    /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */\n\n    let FORBID_ATTR = null;\n    /* Decide if ARIA attributes are okay */\n\n    let ALLOW_ARIA_ATTR = true;\n    /* Decide if custom data attributes are okay */\n\n    let ALLOW_DATA_ATTR = true;\n    /* Decide if unknown protocols are okay */\n\n    let ALLOW_UNKNOWN_PROTOCOLS = false;\n    /* Decide if self-closing tags in attributes are allowed.\n     * Usually removed due to a mXSS issue in jQuery 3.0 */\n\n    let ALLOW_SELF_CLOSE_IN_ATTR = true;\n    /* Output should be safe for common template engines.\n     * This means, DOMPurify removes data attributes, mustaches and ERB\n     */\n\n    let SAFE_FOR_TEMPLATES = false;\n    /* Decide if document with <html>... should be returned */\n\n    let WHOLE_DOCUMENT = false;\n    /* Track whether config is already set on this instance of DOMPurify. */\n\n    let SET_CONFIG = false;\n    /* Decide if all elements (e.g. style, script) must be children of\n     * document.body. By default, browsers might move them to document.head */\n\n    let FORCE_BODY = false;\n    /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html\n     * string (or a TrustedHTML object if Trusted Types are supported).\n     * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead\n     */\n\n    let RETURN_DOM = false;\n    /* Decide if a DOM `DocumentFragment` should be returned, instead of a html\n     * string  (or a TrustedHTML object if Trusted Types are supported) */\n\n    let RETURN_DOM_FRAGMENT = false;\n    /* Try to return a Trusted Type object instead of a string, return a string in\n     * case Trusted Types are not supported  */\n\n    let RETURN_TRUSTED_TYPE = false;\n    /* Output should be free from DOM clobbering attacks?\n     * This sanitizes markups named with colliding, clobberable built-in DOM APIs.\n     */\n\n    let SANITIZE_DOM = true;\n    /* Achieve full DOM Clobbering protection by isolating the namespace of named\n     * properties and JS variables, mitigating attacks that abuse the HTML/DOM spec rules.\n     *\n     * HTML/DOM spec rules that enable DOM Clobbering:\n     *   - Named Access on Window (§7.3.3)\n     *   - DOM Tree Accessors (§3.1.5)\n     *   - Form Element Parent-Child Relations (§4.10.3)\n     *   - Iframe srcdoc / Nested WindowProxies (§4.8.5)\n     *   - HTMLCollection (§4.2.10.2)\n     *\n     * Namespace isolation is implemented by prefixing `id` and `name` attributes\n     * with a constant string, i.e., `user-content-`\n     */\n\n    let SANITIZE_NAMED_PROPS = false;\n    const SANITIZE_NAMED_PROPS_PREFIX = 'user-content-';\n    /* Keep element content when removing element? */\n\n    let KEEP_CONTENT = true;\n    /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead\n     * of importing it into a new Document and returning a sanitized copy */\n\n    let IN_PLACE = false;\n    /* Allow usage of profiles like html, svg and mathMl */\n\n    let USE_PROFILES = {};\n    /* Tags to ignore content of when KEEP_CONTENT is true */\n\n    let FORBID_CONTENTS = null;\n    const DEFAULT_FORBID_CONTENTS = addToSet({}, ['annotation-xml', 'audio', 'colgroup', 'desc', 'foreignobject', 'head', 'iframe', 'math', 'mi', 'mn', 'mo', 'ms', 'mtext', 'noembed', 'noframes', 'noscript', 'plaintext', 'script', 'style', 'svg', 'template', 'thead', 'title', 'video', 'xmp']);\n    /* Tags that are safe for data: URIs */\n\n    let DATA_URI_TAGS = null;\n    const DEFAULT_DATA_URI_TAGS = addToSet({}, ['audio', 'video', 'img', 'source', 'image', 'track']);\n    /* Attributes safe for values like \"javascript:\" */\n\n    let URI_SAFE_ATTRIBUTES = null;\n    const DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ['alt', 'class', 'for', 'id', 'label', 'name', 'pattern', 'placeholder', 'role', 'summary', 'title', 'value', 'style', 'xmlns']);\n    const MATHML_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';\n    const SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\n    const HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';\n    /* Document namespace */\n\n    let NAMESPACE = HTML_NAMESPACE;\n    let IS_EMPTY_INPUT = false;\n    /* Allowed XHTML+XML namespaces */\n\n    let ALLOWED_NAMESPACES = null;\n    const DEFAULT_ALLOWED_NAMESPACES = addToSet({}, [MATHML_NAMESPACE, SVG_NAMESPACE, HTML_NAMESPACE], stringToString);\n    /* Parsing of strict XHTML documents */\n\n    let PARSER_MEDIA_TYPE = null;\n    const SUPPORTED_PARSER_MEDIA_TYPES = ['application/xhtml+xml', 'text/html'];\n    const DEFAULT_PARSER_MEDIA_TYPE = 'text/html';\n    let transformCaseFunc = null;\n    /* Keep a reference to config to pass to hooks */\n\n    let CONFIG = null;\n    /* Ideally, do not touch anything below this line */\n\n    /* ______________________________________________ */\n\n    const formElement = document.createElement('form');\n\n    const isRegexOrFunction = function isRegexOrFunction(testValue) {\n      return testValue instanceof RegExp || testValue instanceof Function;\n    };\n    /**\n     * _parseConfig\n     *\n     * @param  {Object} cfg optional config literal\n     */\n    // eslint-disable-next-line complexity\n\n\n    const _parseConfig = function _parseConfig() {\n      let cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (CONFIG && CONFIG === cfg) {\n        return;\n      }\n      /* Shield configuration object from tampering */\n\n\n      if (!cfg || typeof cfg !== 'object') {\n        cfg = {};\n      }\n      /* Shield configuration object from prototype pollution */\n\n\n      cfg = clone(cfg);\n      PARSER_MEDIA_TYPE = // eslint-disable-next-line unicorn/prefer-includes\n      SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1 ? PARSER_MEDIA_TYPE = DEFAULT_PARSER_MEDIA_TYPE : PARSER_MEDIA_TYPE = cfg.PARSER_MEDIA_TYPE; // HTML tags and attributes are not case-sensitive, converting to lowercase. Keeping XHTML as is.\n\n      transformCaseFunc = PARSER_MEDIA_TYPE === 'application/xhtml+xml' ? stringToString : stringToLowerCase;\n      /* Set configuration parameters */\n\n      ALLOWED_TAGS = 'ALLOWED_TAGS' in cfg ? addToSet({}, cfg.ALLOWED_TAGS, transformCaseFunc) : DEFAULT_ALLOWED_TAGS;\n      ALLOWED_ATTR = 'ALLOWED_ATTR' in cfg ? addToSet({}, cfg.ALLOWED_ATTR, transformCaseFunc) : DEFAULT_ALLOWED_ATTR;\n      ALLOWED_NAMESPACES = 'ALLOWED_NAMESPACES' in cfg ? addToSet({}, cfg.ALLOWED_NAMESPACES, stringToString) : DEFAULT_ALLOWED_NAMESPACES;\n      URI_SAFE_ATTRIBUTES = 'ADD_URI_SAFE_ATTR' in cfg ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), // eslint-disable-line indent\n      cfg.ADD_URI_SAFE_ATTR, // eslint-disable-line indent\n      transformCaseFunc // eslint-disable-line indent\n      ) // eslint-disable-line indent\n      : DEFAULT_URI_SAFE_ATTRIBUTES;\n      DATA_URI_TAGS = 'ADD_DATA_URI_TAGS' in cfg ? addToSet(clone(DEFAULT_DATA_URI_TAGS), // eslint-disable-line indent\n      cfg.ADD_DATA_URI_TAGS, // eslint-disable-line indent\n      transformCaseFunc // eslint-disable-line indent\n      ) // eslint-disable-line indent\n      : DEFAULT_DATA_URI_TAGS;\n      FORBID_CONTENTS = 'FORBID_CONTENTS' in cfg ? addToSet({}, cfg.FORBID_CONTENTS, transformCaseFunc) : DEFAULT_FORBID_CONTENTS;\n      FORBID_TAGS = 'FORBID_TAGS' in cfg ? addToSet({}, cfg.FORBID_TAGS, transformCaseFunc) : {};\n      FORBID_ATTR = 'FORBID_ATTR' in cfg ? addToSet({}, cfg.FORBID_ATTR, transformCaseFunc) : {};\n      USE_PROFILES = 'USE_PROFILES' in cfg ? cfg.USE_PROFILES : false;\n      ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true\n\n      ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true\n\n      ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false\n\n      ALLOW_SELF_CLOSE_IN_ATTR = cfg.ALLOW_SELF_CLOSE_IN_ATTR !== false; // Default true\n\n      SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false\n\n      WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false\n\n      RETURN_DOM = cfg.RETURN_DOM || false; // Default false\n\n      RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false\n\n      RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false\n\n      FORCE_BODY = cfg.FORCE_BODY || false; // Default false\n\n      SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true\n\n      SANITIZE_NAMED_PROPS = cfg.SANITIZE_NAMED_PROPS || false; // Default false\n\n      KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true\n\n      IN_PLACE = cfg.IN_PLACE || false; // Default false\n\n      IS_ALLOWED_URI$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI;\n      NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;\n      CUSTOM_ELEMENT_HANDLING = cfg.CUSTOM_ELEMENT_HANDLING || {};\n\n      if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)) {\n        CUSTOM_ELEMENT_HANDLING.tagNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;\n      }\n\n      if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)) {\n        CUSTOM_ELEMENT_HANDLING.attributeNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;\n      }\n\n      if (cfg.CUSTOM_ELEMENT_HANDLING && typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements === 'boolean') {\n        CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements = cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;\n      }\n\n      if (SAFE_FOR_TEMPLATES) {\n        ALLOW_DATA_ATTR = false;\n      }\n\n      if (RETURN_DOM_FRAGMENT) {\n        RETURN_DOM = true;\n      }\n      /* Parse profile info */\n\n\n      if (USE_PROFILES) {\n        ALLOWED_TAGS = addToSet({}, [...text]);\n        ALLOWED_ATTR = [];\n\n        if (USE_PROFILES.html === true) {\n          addToSet(ALLOWED_TAGS, html$1);\n          addToSet(ALLOWED_ATTR, html);\n        }\n\n        if (USE_PROFILES.svg === true) {\n          addToSet(ALLOWED_TAGS, svg$1);\n          addToSet(ALLOWED_ATTR, svg);\n          addToSet(ALLOWED_ATTR, xml);\n        }\n\n        if (USE_PROFILES.svgFilters === true) {\n          addToSet(ALLOWED_TAGS, svgFilters);\n          addToSet(ALLOWED_ATTR, svg);\n          addToSet(ALLOWED_ATTR, xml);\n        }\n\n        if (USE_PROFILES.mathMl === true) {\n          addToSet(ALLOWED_TAGS, mathMl$1);\n          addToSet(ALLOWED_ATTR, mathMl);\n          addToSet(ALLOWED_ATTR, xml);\n        }\n      }\n      /* Merge configuration parameters */\n\n\n      if (cfg.ADD_TAGS) {\n        if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {\n          ALLOWED_TAGS = clone(ALLOWED_TAGS);\n        }\n\n        addToSet(ALLOWED_TAGS, cfg.ADD_TAGS, transformCaseFunc);\n      }\n\n      if (cfg.ADD_ATTR) {\n        if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {\n          ALLOWED_ATTR = clone(ALLOWED_ATTR);\n        }\n\n        addToSet(ALLOWED_ATTR, cfg.ADD_ATTR, transformCaseFunc);\n      }\n\n      if (cfg.ADD_URI_SAFE_ATTR) {\n        addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR, transformCaseFunc);\n      }\n\n      if (cfg.FORBID_CONTENTS) {\n        if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {\n          FORBID_CONTENTS = clone(FORBID_CONTENTS);\n        }\n\n        addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS, transformCaseFunc);\n      }\n      /* Add #text in case KEEP_CONTENT is set to true */\n\n\n      if (KEEP_CONTENT) {\n        ALLOWED_TAGS['#text'] = true;\n      }\n      /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */\n\n\n      if (WHOLE_DOCUMENT) {\n        addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);\n      }\n      /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */\n\n\n      if (ALLOWED_TAGS.table) {\n        addToSet(ALLOWED_TAGS, ['tbody']);\n        delete FORBID_TAGS.tbody;\n      }\n\n      if (cfg.TRUSTED_TYPES_POLICY) {\n        if (typeof cfg.TRUSTED_TYPES_POLICY.createHTML !== 'function') {\n          throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a \"createHTML\" hook.');\n        }\n\n        if (typeof cfg.TRUSTED_TYPES_POLICY.createScriptURL !== 'function') {\n          throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a \"createScriptURL\" hook.');\n        } // Overwrite existing TrustedTypes policy.\n\n\n        trustedTypesPolicy = cfg.TRUSTED_TYPES_POLICY; // Sign local variables required by `sanitize`.\n\n        emptyHTML = trustedTypesPolicy.createHTML('');\n      } else {\n        // Uninitialized policy, attempt to initialize the internal dompurify policy.\n        if (trustedTypesPolicy === undefined) {\n          trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, currentScript);\n        } // If creating the internal policy succeeded sign internal variables.\n\n\n        if (trustedTypesPolicy !== null && typeof emptyHTML === 'string') {\n          emptyHTML = trustedTypesPolicy.createHTML('');\n        }\n      } // Prevent further manipulation of configuration.\n      // Not available in IE8, Safari 5, etc.\n\n\n      if (freeze) {\n        freeze(cfg);\n      }\n\n      CONFIG = cfg;\n    };\n\n    const MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, ['mi', 'mo', 'mn', 'ms', 'mtext']);\n    const HTML_INTEGRATION_POINTS = addToSet({}, ['foreignobject', 'desc', 'title', 'annotation-xml']); // Certain elements are allowed in both SVG and HTML\n    // namespace. We need to specify them explicitly\n    // so that they don't get erroneously deleted from\n    // HTML namespace.\n\n    const COMMON_SVG_AND_HTML_ELEMENTS = addToSet({}, ['title', 'style', 'font', 'a', 'script']);\n    /* Keep track of all possible SVG and MathML tags\n     * so that we can perform the namespace checks\n     * correctly. */\n\n    const ALL_SVG_TAGS = addToSet({}, svg$1);\n    addToSet(ALL_SVG_TAGS, svgFilters);\n    addToSet(ALL_SVG_TAGS, svgDisallowed);\n    const ALL_MATHML_TAGS = addToSet({}, mathMl$1);\n    addToSet(ALL_MATHML_TAGS, mathMlDisallowed);\n    /**\n     * @param  {Element} element a DOM element whose namespace is being checked\n     * @returns {boolean} Return false if the element has a\n     *  namespace that a spec-compliant parser would never\n     *  return. Return true otherwise.\n     */\n\n    const _checkValidNamespace = function _checkValidNamespace(element) {\n      let parent = getParentNode(element); // In JSDOM, if we're inside shadow DOM, then parentNode\n      // can be null. We just simulate parent in this case.\n\n      if (!parent || !parent.tagName) {\n        parent = {\n          namespaceURI: NAMESPACE,\n          tagName: 'template'\n        };\n      }\n\n      const tagName = stringToLowerCase(element.tagName);\n      const parentTagName = stringToLowerCase(parent.tagName);\n\n      if (!ALLOWED_NAMESPACES[element.namespaceURI]) {\n        return false;\n      }\n\n      if (element.namespaceURI === SVG_NAMESPACE) {\n        // The only way to switch from HTML namespace to SVG\n        // is via <svg>. If it happens via any other tag, then\n        // it should be killed.\n        if (parent.namespaceURI === HTML_NAMESPACE) {\n          return tagName === 'svg';\n        } // The only way to switch from MathML to SVG is via`\n        // svg if parent is either <annotation-xml> or MathML\n        // text integration points.\n\n\n        if (parent.namespaceURI === MATHML_NAMESPACE) {\n          return tagName === 'svg' && (parentTagName === 'annotation-xml' || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);\n        } // We only allow elements that are defined in SVG\n        // spec. All others are disallowed in SVG namespace.\n\n\n        return Boolean(ALL_SVG_TAGS[tagName]);\n      }\n\n      if (element.namespaceURI === MATHML_NAMESPACE) {\n        // The only way to switch from HTML namespace to MathML\n        // is via <math>. If it happens via any other tag, then\n        // it should be killed.\n        if (parent.namespaceURI === HTML_NAMESPACE) {\n          return tagName === 'math';\n        } // The only way to switch from SVG to MathML is via\n        // <math> and HTML integration points\n\n\n        if (parent.namespaceURI === SVG_NAMESPACE) {\n          return tagName === 'math' && HTML_INTEGRATION_POINTS[parentTagName];\n        } // We only allow elements that are defined in MathML\n        // spec. All others are disallowed in MathML namespace.\n\n\n        return Boolean(ALL_MATHML_TAGS[tagName]);\n      }\n\n      if (element.namespaceURI === HTML_NAMESPACE) {\n        // The only way to switch from SVG to HTML is via\n        // HTML integration points, and from MathML to HTML\n        // is via MathML text integration points\n        if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {\n          return false;\n        }\n\n        if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {\n          return false;\n        } // We disallow tags that are specific for MathML\n        // or SVG and should never appear in HTML namespace\n\n\n        return !ALL_MATHML_TAGS[tagName] && (COMMON_SVG_AND_HTML_ELEMENTS[tagName] || !ALL_SVG_TAGS[tagName]);\n      } // For XHTML and XML documents that support custom namespaces\n\n\n      if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && ALLOWED_NAMESPACES[element.namespaceURI]) {\n        return true;\n      } // The code should never reach this place (this means\n      // that the element somehow got namespace that is not\n      // HTML, SVG, MathML or allowed via ALLOWED_NAMESPACES).\n      // Return false just in case.\n\n\n      return false;\n    };\n    /**\n     * _forceRemove\n     *\n     * @param  {Node} node a DOM node\n     */\n\n\n    const _forceRemove = function _forceRemove(node) {\n      arrayPush(DOMPurify.removed, {\n        element: node\n      });\n\n      try {\n        // eslint-disable-next-line unicorn/prefer-dom-node-remove\n        node.parentNode.removeChild(node);\n      } catch (_) {\n        node.remove();\n      }\n    };\n    /**\n     * _removeAttribute\n     *\n     * @param  {String} name an Attribute name\n     * @param  {Node} node a DOM node\n     */\n\n\n    const _removeAttribute = function _removeAttribute(name, node) {\n      try {\n        arrayPush(DOMPurify.removed, {\n          attribute: node.getAttributeNode(name),\n          from: node\n        });\n      } catch (_) {\n        arrayPush(DOMPurify.removed, {\n          attribute: null,\n          from: node\n        });\n      }\n\n      node.removeAttribute(name); // We void attribute values for unremovable \"is\"\" attributes\n\n      if (name === 'is' && !ALLOWED_ATTR[name]) {\n        if (RETURN_DOM || RETURN_DOM_FRAGMENT) {\n          try {\n            _forceRemove(node);\n          } catch (_) {}\n        } else {\n          try {\n            node.setAttribute(name, '');\n          } catch (_) {}\n        }\n      }\n    };\n    /**\n     * _initDocument\n     *\n     * @param  {String} dirty a string of dirty markup\n     * @return {Document} a DOM, filled with the dirty markup\n     */\n\n\n    const _initDocument = function _initDocument(dirty) {\n      /* Create a HTML document */\n      let doc = null;\n      let leadingWhitespace = null;\n\n      if (FORCE_BODY) {\n        dirty = '<remove></remove>' + dirty;\n      } else {\n        /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */\n        const matches = stringMatch(dirty, /^[\\r\\n\\t ]+/);\n        leadingWhitespace = matches && matches[0];\n      }\n\n      if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && NAMESPACE === HTML_NAMESPACE) {\n        // Root of XHTML doc must contain xmlns declaration (see https://www.w3.org/TR/xhtml1/normative.html#strict)\n        dirty = '<html xmlns=\"http://www.w3.org/1999/xhtml\"><head></head><body>' + dirty + '</body></html>';\n      }\n\n      const dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;\n      /*\n       * Use the DOMParser API by default, fallback later if needs be\n       * DOMParser not work for svg when has multiple root element.\n       */\n\n      if (NAMESPACE === HTML_NAMESPACE) {\n        try {\n          doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);\n        } catch (_) {}\n      }\n      /* Use createHTMLDocument in case DOMParser is not available */\n\n\n      if (!doc || !doc.documentElement) {\n        doc = implementation.createDocument(NAMESPACE, 'template', null);\n\n        try {\n          doc.documentElement.innerHTML = IS_EMPTY_INPUT ? emptyHTML : dirtyPayload;\n        } catch (_) {// Syntax error if dirtyPayload is invalid xml\n        }\n      }\n\n      const body = doc.body || doc.documentElement;\n\n      if (dirty && leadingWhitespace) {\n        body.insertBefore(document.createTextNode(leadingWhitespace), body.childNodes[0] || null);\n      }\n      /* Work on whole document or just its body */\n\n\n      if (NAMESPACE === HTML_NAMESPACE) {\n        return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];\n      }\n\n      return WHOLE_DOCUMENT ? doc.documentElement : body;\n    };\n    /**\n     * Creates a NodeIterator object that you can use to traverse filtered lists of nodes or elements in a document.\n     *\n     * @param  {Node} root The root element or node to start traversing on.\n     * @return {NodeIterator} The created NodeIterator\n     */\n\n\n    const _createNodeIterator = function _createNodeIterator(root) {\n      return createNodeIterator.call(root.ownerDocument || root, root, // eslint-disable-next-line no-bitwise\n      NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT, null);\n    };\n    /**\n     * _isClobbered\n     *\n     * @param  {Node} elm element to check for clobbering attacks\n     * @return {Boolean} true if clobbered, false if safe\n     */\n\n\n    const _isClobbered = function _isClobbered(elm) {\n      return elm instanceof HTMLFormElement && (typeof elm.nodeName !== 'string' || typeof elm.textContent !== 'string' || typeof elm.removeChild !== 'function' || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== 'function' || typeof elm.setAttribute !== 'function' || typeof elm.namespaceURI !== 'string' || typeof elm.insertBefore !== 'function' || typeof elm.hasChildNodes !== 'function');\n    };\n    /**\n     * Checks whether the given object is a DOM node.\n     *\n     * @param  {Node} object object to check whether it's a DOM node\n     * @return {Boolean} true is object is a DOM node\n     */\n\n\n    const _isNode = function _isNode(object) {\n      return typeof Node === 'function' && object instanceof Node;\n    };\n    /**\n     * _executeHook\n     * Execute user configurable hooks\n     *\n     * @param  {String} entryPoint  Name of the hook's entry point\n     * @param  {Node} currentNode node to work on with the hook\n     * @param  {Object} data additional hook parameters\n     */\n\n\n    const _executeHook = function _executeHook(entryPoint, currentNode, data) {\n      if (!hooks[entryPoint]) {\n        return;\n      }\n\n      arrayForEach(hooks[entryPoint], hook => {\n        hook.call(DOMPurify, currentNode, data, CONFIG);\n      });\n    };\n    /**\n     * _sanitizeElements\n     *\n     * @protect nodeName\n     * @protect textContent\n     * @protect removeChild\n     *\n     * @param   {Node} currentNode to check for permission to exist\n     * @return  {Boolean} true if node was killed, false if left alive\n     */\n\n\n    const _sanitizeElements = function _sanitizeElements(currentNode) {\n      let content = null;\n      /* Execute a hook if present */\n\n      _executeHook('beforeSanitizeElements', currentNode, null);\n      /* Check if element is clobbered or can clobber */\n\n\n      if (_isClobbered(currentNode)) {\n        _forceRemove(currentNode);\n\n        return true;\n      }\n      /* Now let's check the element's type and name */\n\n\n      const tagName = transformCaseFunc(currentNode.nodeName);\n      /* Execute a hook if present */\n\n      _executeHook('uponSanitizeElement', currentNode, {\n        tagName,\n        allowedTags: ALLOWED_TAGS\n      });\n      /* Detect mXSS attempts abusing namespace confusion */\n\n\n      if (currentNode.hasChildNodes() && !_isNode(currentNode.firstElementChild) && regExpTest(/<[/\\w]/g, currentNode.innerHTML) && regExpTest(/<[/\\w]/g, currentNode.textContent)) {\n        _forceRemove(currentNode);\n\n        return true;\n      }\n      /* Remove element if anything forbids its presence */\n\n\n      if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n        /* Check if we have a custom element to handle */\n        if (!FORBID_TAGS[tagName] && _isBasicCustomElement(tagName)) {\n          if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)) {\n            return false;\n          }\n\n          if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)) {\n            return false;\n          }\n        }\n        /* Keep content except for bad-listed elements */\n\n\n        if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {\n          const parentNode = getParentNode(currentNode) || currentNode.parentNode;\n          const childNodes = getChildNodes(currentNode) || currentNode.childNodes;\n\n          if (childNodes && parentNode) {\n            const childCount = childNodes.length;\n\n            for (let i = childCount - 1; i >= 0; --i) {\n              parentNode.insertBefore(cloneNode(childNodes[i], true), getNextSibling(currentNode));\n            }\n          }\n        }\n\n        _forceRemove(currentNode);\n\n        return true;\n      }\n      /* Check whether element has a valid namespace */\n\n\n      if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {\n        _forceRemove(currentNode);\n\n        return true;\n      }\n      /* Make sure that older browsers don't get fallback-tag mXSS */\n\n\n      if ((tagName === 'noscript' || tagName === 'noembed' || tagName === 'noframes') && regExpTest(/<\\/no(script|embed|frames)/i, currentNode.innerHTML)) {\n        _forceRemove(currentNode);\n\n        return true;\n      }\n      /* Sanitize element content to be template-safe */\n\n\n      if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {\n        /* Get the element's text content */\n        content = currentNode.textContent;\n        arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], expr => {\n          content = stringReplace(content, expr, ' ');\n        });\n\n        if (currentNode.textContent !== content) {\n          arrayPush(DOMPurify.removed, {\n            element: currentNode.cloneNode()\n          });\n          currentNode.textContent = content;\n        }\n      }\n      /* Execute a hook if present */\n\n\n      _executeHook('afterSanitizeElements', currentNode, null);\n\n      return false;\n    };\n    /**\n     * _isValidAttribute\n     *\n     * @param  {string} lcTag Lowercase tag name of containing element.\n     * @param  {string} lcName Lowercase attribute name.\n     * @param  {string} value Attribute value.\n     * @return {Boolean} Returns true if `value` is valid, otherwise false.\n     */\n    // eslint-disable-next-line complexity\n\n\n    const _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {\n      /* Make sure attribute cannot clobber */\n      if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) {\n        return false;\n      }\n      /* Allow valid data-* attributes: At least one character after \"-\"\n          (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)\n          XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)\n          We don't need to check the value; it's always URI safe. */\n\n\n      if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR, lcName)) ; else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR, lcName)) ; else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {\n        if ( // First condition does a very basic check if a) it's basically a valid custom element tagname AND\n        // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\n        // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck\n        _isBasicCustomElement(lcTag) && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag)) && (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName) || CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)) || // Alternative, second condition checks if it's an `is`-attribute, AND\n        // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\n        lcName === 'is' && CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(value))) ; else {\n          return false;\n        }\n        /* Check value is safe. First, is attr inert? If so, is safe */\n\n      } else if (URI_SAFE_ATTRIBUTES[lcName]) ; else if (regExpTest(IS_ALLOWED_URI$1, stringReplace(value, ATTR_WHITESPACE, ''))) ; else if ((lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') && lcTag !== 'script' && stringIndexOf(value, 'data:') === 0 && DATA_URI_TAGS[lcTag]) ; else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA, stringReplace(value, ATTR_WHITESPACE, ''))) ; else if (value) {\n        return false;\n      } else ;\n\n      return true;\n    };\n    /**\n     * _isBasicCustomElement\n     * checks if at least one dash is included in tagName, and it's not the first char\n     * for more sophisticated checking see https://github.com/sindresorhus/validate-element-name\n     *\n     * @param {string} tagName name of the tag of the node to sanitize\n     * @returns {boolean} Returns true if the tag name meets the basic criteria for a custom element, otherwise false.\n     */\n\n\n    const _isBasicCustomElement = function _isBasicCustomElement(tagName) {\n      return tagName.indexOf('-') > 0;\n    };\n    /**\n     * _sanitizeAttributes\n     *\n     * @protect attributes\n     * @protect nodeName\n     * @protect removeAttribute\n     * @protect setAttribute\n     *\n     * @param  {Node} currentNode to sanitize\n     */\n\n\n    const _sanitizeAttributes = function _sanitizeAttributes(currentNode) {\n      /* Execute a hook if present */\n      _executeHook('beforeSanitizeAttributes', currentNode, null);\n\n      const {\n        attributes\n      } = currentNode;\n      /* Check if we have attributes; if not we might have a text node */\n\n      if (!attributes) {\n        return;\n      }\n\n      const hookEvent = {\n        attrName: '',\n        attrValue: '',\n        keepAttr: true,\n        allowedAttributes: ALLOWED_ATTR\n      };\n      let l = attributes.length;\n      /* Go backwards over all attributes; safely remove bad ones */\n\n      while (l--) {\n        const attr = attributes[l];\n        const {\n          name,\n          namespaceURI,\n          value: attrValue\n        } = attr;\n        const lcName = transformCaseFunc(name);\n        let value = name === 'value' ? attrValue : stringTrim(attrValue);\n        /* Execute a hook if present */\n\n        hookEvent.attrName = lcName;\n        hookEvent.attrValue = value;\n        hookEvent.keepAttr = true;\n        hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set\n\n        _executeHook('uponSanitizeAttribute', currentNode, hookEvent);\n\n        value = hookEvent.attrValue;\n        /* Did the hooks approve of the attribute? */\n\n        if (hookEvent.forceKeepAttr) {\n          continue;\n        }\n        /* Remove attribute */\n\n\n        _removeAttribute(name, currentNode);\n        /* Did the hooks approve of the attribute? */\n\n\n        if (!hookEvent.keepAttr) {\n          continue;\n        }\n        /* Work around a security issue in jQuery 3.0 */\n\n\n        if (!ALLOW_SELF_CLOSE_IN_ATTR && regExpTest(/\\/>/i, value)) {\n          _removeAttribute(name, currentNode);\n\n          continue;\n        }\n        /* Sanitize attribute content to be template-safe */\n\n\n        if (SAFE_FOR_TEMPLATES) {\n          arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], expr => {\n            value = stringReplace(value, expr, ' ');\n          });\n        }\n        /* Is `value` valid for this attribute? */\n\n\n        const lcTag = transformCaseFunc(currentNode.nodeName);\n\n        if (!_isValidAttribute(lcTag, lcName, value)) {\n          continue;\n        }\n        /* Full DOM Clobbering protection via namespace isolation,\n         * Prefix id and name attributes with `user-content-`\n         */\n\n\n        if (SANITIZE_NAMED_PROPS && (lcName === 'id' || lcName === 'name')) {\n          // Remove the attribute with this value\n          _removeAttribute(name, currentNode); // Prefix the value and later re-create the attribute with the sanitized value\n\n\n          value = SANITIZE_NAMED_PROPS_PREFIX + value;\n        }\n        /* Handle attributes that require Trusted Types */\n\n\n        if (trustedTypesPolicy && typeof trustedTypes === 'object' && typeof trustedTypes.getAttributeType === 'function') {\n          if (namespaceURI) ; else {\n            switch (trustedTypes.getAttributeType(lcTag, lcName)) {\n              case 'TrustedHTML':\n                {\n                  value = trustedTypesPolicy.createHTML(value);\n                  break;\n                }\n\n              case 'TrustedScriptURL':\n                {\n                  value = trustedTypesPolicy.createScriptURL(value);\n                  break;\n                }\n            }\n          }\n        }\n        /* Handle invalid data-* attribute set by try-catching it */\n\n\n        try {\n          if (namespaceURI) {\n            currentNode.setAttributeNS(namespaceURI, name, value);\n          } else {\n            /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. \"x-schema\". */\n            currentNode.setAttribute(name, value);\n          }\n\n          arrayPop(DOMPurify.removed);\n        } catch (_) {}\n      }\n      /* Execute a hook if present */\n\n\n      _executeHook('afterSanitizeAttributes', currentNode, null);\n    };\n    /**\n     * _sanitizeShadowDOM\n     *\n     * @param  {DocumentFragment} fragment to iterate over recursively\n     */\n\n\n    const _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {\n      let shadowNode = null;\n\n      const shadowIterator = _createNodeIterator(fragment);\n      /* Execute a hook if present */\n\n\n      _executeHook('beforeSanitizeShadowDOM', fragment, null);\n\n      while (shadowNode = shadowIterator.nextNode()) {\n        /* Execute a hook if present */\n        _executeHook('uponSanitizeShadowNode', shadowNode, null);\n        /* Sanitize tags and elements */\n\n\n        if (_sanitizeElements(shadowNode)) {\n          continue;\n        }\n        /* Deep shadow DOM detected */\n\n\n        if (shadowNode.content instanceof DocumentFragment) {\n          _sanitizeShadowDOM(shadowNode.content);\n        }\n        /* Check attributes, sanitize if necessary */\n\n\n        _sanitizeAttributes(shadowNode);\n      }\n      /* Execute a hook if present */\n\n\n      _executeHook('afterSanitizeShadowDOM', fragment, null);\n    };\n    /**\n     * Sanitize\n     * Public method providing core sanitation functionality\n     *\n     * @param {String|Node} dirty string or DOM node\n     * @param {Object} cfg object\n     */\n    // eslint-disable-next-line complexity\n\n\n    DOMPurify.sanitize = function (dirty) {\n      let cfg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      let body = null;\n      let importedNode = null;\n      let currentNode = null;\n      let returnNode = null;\n      /* Make sure we have a string to sanitize.\n        DO NOT return early, as this will return the wrong type if\n        the user has requested a DOM object rather than a string */\n\n      IS_EMPTY_INPUT = !dirty;\n\n      if (IS_EMPTY_INPUT) {\n        dirty = '<!-->';\n      }\n      /* Stringify, in case dirty is an object */\n\n\n      if (typeof dirty !== 'string' && !_isNode(dirty)) {\n        if (typeof dirty.toString === 'function') {\n          dirty = dirty.toString();\n\n          if (typeof dirty !== 'string') {\n            throw typeErrorCreate('dirty is not a string, aborting');\n          }\n        } else {\n          throw typeErrorCreate('toString is not a function');\n        }\n      }\n      /* Return dirty HTML if DOMPurify cannot run */\n\n\n      if (!DOMPurify.isSupported) {\n        return dirty;\n      }\n      /* Assign config vars */\n\n\n      if (!SET_CONFIG) {\n        _parseConfig(cfg);\n      }\n      /* Clean up removed elements */\n\n\n      DOMPurify.removed = [];\n      /* Check if dirty is correctly typed for IN_PLACE */\n\n      if (typeof dirty === 'string') {\n        IN_PLACE = false;\n      }\n\n      if (IN_PLACE) {\n        /* Do some early pre-sanitization to avoid unsafe root nodes */\n        if (dirty.nodeName) {\n          const tagName = transformCaseFunc(dirty.nodeName);\n\n          if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n            throw typeErrorCreate('root node is forbidden and cannot be sanitized in-place');\n          }\n        }\n      } else if (dirty instanceof Node) {\n        /* If dirty is a DOM element, append to an empty document to avoid\n           elements being stripped by the parser */\n        body = _initDocument('<!---->');\n        importedNode = body.ownerDocument.importNode(dirty, true);\n\n        if (importedNode.nodeType === 1 && importedNode.nodeName === 'BODY') {\n          /* Node is already a body, use as is */\n          body = importedNode;\n        } else if (importedNode.nodeName === 'HTML') {\n          body = importedNode;\n        } else {\n          // eslint-disable-next-line unicorn/prefer-dom-node-append\n          body.appendChild(importedNode);\n        }\n      } else {\n        /* Exit directly if we have nothing to do */\n        if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT && // eslint-disable-next-line unicorn/prefer-includes\n        dirty.indexOf('<') === -1) {\n          return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;\n        }\n        /* Initialize the document to work on */\n\n\n        body = _initDocument(dirty);\n        /* Check we have a DOM node from the data */\n\n        if (!body) {\n          return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : '';\n        }\n      }\n      /* Remove first element node (ours) if FORCE_BODY is set */\n\n\n      if (body && FORCE_BODY) {\n        _forceRemove(body.firstChild);\n      }\n      /* Get node iterator */\n\n\n      const nodeIterator = _createNodeIterator(IN_PLACE ? dirty : body);\n      /* Now start iterating over the created document */\n\n\n      while (currentNode = nodeIterator.nextNode()) {\n        /* Sanitize tags and elements */\n        if (_sanitizeElements(currentNode)) {\n          continue;\n        }\n        /* Shadow DOM detected, sanitize it */\n\n\n        if (currentNode.content instanceof DocumentFragment) {\n          _sanitizeShadowDOM(currentNode.content);\n        }\n        /* Check attributes, sanitize if necessary */\n\n\n        _sanitizeAttributes(currentNode);\n      }\n      /* If we sanitized `dirty` in-place, return it. */\n\n\n      if (IN_PLACE) {\n        return dirty;\n      }\n      /* Return sanitized string or DOM */\n\n\n      if (RETURN_DOM) {\n        if (RETURN_DOM_FRAGMENT) {\n          returnNode = createDocumentFragment.call(body.ownerDocument);\n\n          while (body.firstChild) {\n            // eslint-disable-next-line unicorn/prefer-dom-node-append\n            returnNode.appendChild(body.firstChild);\n          }\n        } else {\n          returnNode = body;\n        }\n\n        if (ALLOWED_ATTR.shadowroot || ALLOWED_ATTR.shadowrootmode) {\n          /*\n            AdoptNode() is not used because internal state is not reset\n            (e.g. the past names map of a HTMLFormElement), this is safe\n            in theory but we would rather not risk another attack vector.\n            The state that is cloned by importNode() is explicitly defined\n            by the specs.\n          */\n          returnNode = importNode.call(originalDocument, returnNode, true);\n        }\n\n        return returnNode;\n      }\n\n      let serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;\n      /* Serialize doctype if allowed */\n\n      if (WHOLE_DOCUMENT && ALLOWED_TAGS['!doctype'] && body.ownerDocument && body.ownerDocument.doctype && body.ownerDocument.doctype.name && regExpTest(DOCTYPE_NAME, body.ownerDocument.doctype.name)) {\n        serializedHTML = '<!DOCTYPE ' + body.ownerDocument.doctype.name + '>\\n' + serializedHTML;\n      }\n      /* Sanitize final string template-safe */\n\n\n      if (SAFE_FOR_TEMPLATES) {\n        arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], expr => {\n          serializedHTML = stringReplace(serializedHTML, expr, ' ');\n        });\n      }\n\n      return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;\n    };\n    /**\n     * Public method to set the configuration once\n     * setConfig\n     *\n     * @param {Object} cfg configuration object\n     */\n\n\n    DOMPurify.setConfig = function () {\n      let cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _parseConfig(cfg);\n\n      SET_CONFIG = true;\n    };\n    /**\n     * Public method to remove the configuration\n     * clearConfig\n     *\n     */\n\n\n    DOMPurify.clearConfig = function () {\n      CONFIG = null;\n      SET_CONFIG = false;\n    };\n    /**\n     * Public method to check if an attribute value is valid.\n     * Uses last set config, if any. Otherwise, uses config defaults.\n     * isValidAttribute\n     *\n     * @param  {String} tag Tag name of containing element.\n     * @param  {String} attr Attribute name.\n     * @param  {String} value Attribute value.\n     * @return {Boolean} Returns true if `value` is valid. Otherwise, returns false.\n     */\n\n\n    DOMPurify.isValidAttribute = function (tag, attr, value) {\n      /* Initialize shared config vars if necessary. */\n      if (!CONFIG) {\n        _parseConfig({});\n      }\n\n      const lcTag = transformCaseFunc(tag);\n      const lcName = transformCaseFunc(attr);\n      return _isValidAttribute(lcTag, lcName, value);\n    };\n    /**\n     * AddHook\n     * Public method to add DOMPurify hooks\n     *\n     * @param {String} entryPoint entry point for the hook to add\n     * @param {Function} hookFunction function to execute\n     */\n\n\n    DOMPurify.addHook = function (entryPoint, hookFunction) {\n      if (typeof hookFunction !== 'function') {\n        return;\n      }\n\n      hooks[entryPoint] = hooks[entryPoint] || [];\n      arrayPush(hooks[entryPoint], hookFunction);\n    };\n    /**\n     * RemoveHook\n     * Public method to remove a DOMPurify hook at a given entryPoint\n     * (pops it from the stack of hooks if more are present)\n     *\n     * @param {String} entryPoint entry point for the hook to remove\n     * @return {Function} removed(popped) hook\n     */\n\n\n    DOMPurify.removeHook = function (entryPoint) {\n      if (hooks[entryPoint]) {\n        return arrayPop(hooks[entryPoint]);\n      }\n    };\n    /**\n     * RemoveHooks\n     * Public method to remove all DOMPurify hooks at a given entryPoint\n     *\n     * @param  {String} entryPoint entry point for the hooks to remove\n     */\n\n\n    DOMPurify.removeHooks = function (entryPoint) {\n      if (hooks[entryPoint]) {\n        hooks[entryPoint] = [];\n      }\n    };\n    /**\n     * RemoveAllHooks\n     * Public method to remove all DOMPurify hooks\n     */\n\n\n    DOMPurify.removeAllHooks = function () {\n      hooks = {};\n    };\n\n    return DOMPurify;\n  }\n\n  var purify = createDOMPurify();\n\n  return purify;\n\n}));\n//# sourceMappingURL=purify.js.map\n","module.exports = window.DOMPurify || (window.DOMPurify = require('dompurify').default || require('dompurify'));"],"names":["module","exports","factory","entries","setPrototypeOf","isFrozen","getPrototypeOf","getOwnPropertyDescriptor","Object","freeze","seal","create","apply","construct","Reflect","x","fun","thisValue","args","Func","arrayForEach","unapply","Array","prototype","forEach","arrayPop","pop","arrayPush","push","stringToLowerCase","String","toLowerCase","stringToString","toString","stringMatch","match","stringReplace","replace","stringIndexOf","indexOf","stringTrim","trim","regExpTest","RegExp","test","typeErrorCreate","func","TypeError","_len2","arguments","length","_key2","thisArg","_len","_key","addToSet","set","array","transformCaseFunc","undefined","l","element","lcElement","clone","object","newObject","property","value","lookupGetter","prop","desc","get","console","warn","html$1","svg$1","svgFilters","svgDisallowed","mathMl$1","mathMlDisallowed","text","html","svg","mathMl","xml","MUSTACHE_EXPR","ERB_EXPR","TMPLIT_EXPR","DATA_ATTR","ARIA_ATTR","IS_ALLOWED_URI","IS_SCRIPT_OR_DATA","ATTR_WHITESPACE","DOCTYPE_NAME","EXPRESSIONS","__proto__","_createTrustedTypesPolicy","trustedTypes","purifyHostElement","createPolicy","suffix","ATTR_NAME","hasAttribute","getAttribute","policyName","createHTML","createScriptURL","scriptUrl","_","createDOMPurify","trustedTypesPolicy","window","DOMPurify","root","version","removed","document","nodeType","isSupported","originalDocument","currentScript","DocumentFragment","HTMLTemplateElement","Node","Element","NodeFilter","NamedNodeMap","MozNamedAttrMap","HTMLFormElement","DOMParser","ElementPrototype","cloneNode","getNextSibling","getChildNodes","getParentNode","template","createElement","content","ownerDocument","emptyHTML","implementation","createNodeIterator","createDocumentFragment","getElementsByTagName","importNode","hooks","createHTMLDocument","IS_ALLOWED_URI$1","ALLOWED_TAGS","DEFAULT_ALLOWED_TAGS","ALLOWED_ATTR","DEFAULT_ALLOWED_ATTR","CUSTOM_ELEMENT_HANDLING","tagNameCheck","writable","configurable","enumerable","attributeNameCheck","allowCustomizedBuiltInElements","FORBID_TAGS","FORBID_ATTR","ALLOW_ARIA_ATTR","ALLOW_DATA_ATTR","ALLOW_UNKNOWN_PROTOCOLS","ALLOW_SELF_CLOSE_IN_ATTR","SAFE_FOR_TEMPLATES","WHOLE_DOCUMENT","SET_CONFIG","FORCE_BODY","RETURN_DOM","RETURN_DOM_FRAGMENT","RETURN_TRUSTED_TYPE","SANITIZE_DOM","SANITIZE_NAMED_PROPS","KEEP_CONTENT","IN_PLACE","USE_PROFILES","FORBID_CONTENTS","DEFAULT_FORBID_CONTENTS","DATA_URI_TAGS","DEFAULT_DATA_URI_TAGS","URI_SAFE_ATTRIBUTES","DEFAULT_URI_SAFE_ATTRIBUTES","MATHML_NAMESPACE","SVG_NAMESPACE","HTML_NAMESPACE","NAMESPACE","IS_EMPTY_INPUT","ALLOWED_NAMESPACES","DEFAULT_ALLOWED_NAMESPACES","PARSER_MEDIA_TYPE","SUPPORTED_PARSER_MEDIA_TYPES","CONFIG","formElement","isRegexOrFunction","testValue","Function","_parseConfig","cfg","ADD_URI_SAFE_ATTR","ADD_DATA_URI_TAGS","ALLOWED_URI_REGEXP","ADD_TAGS","ADD_ATTR","table","tbody","TRUSTED_TYPES_POLICY","MATHML_TEXT_INTEGRATION_POINTS","HTML_INTEGRATION_POINTS","COMMON_SVG_AND_HTML_ELEMENTS","ALL_SVG_TAGS","ALL_MATHML_TAGS","_checkValidNamespace","parent","tagName","namespaceURI","parentTagName","Boolean","_forceRemove","node","parentNode","removeChild","remove","_removeAttribute","name","attribute","getAttributeNode","from","removeAttribute","setAttribute","_initDocument","dirty","doc","leadingWhitespace","matches","dirtyPayload","parseFromString","documentElement","createDocument","innerHTML","body","insertBefore","createTextNode","childNodes","call","_createNodeIterator","SHOW_ELEMENT","SHOW_COMMENT","SHOW_TEXT","_isNode","_executeHook","entryPoint","currentNode","data","hook","_sanitizeElements","elm","nodeName","textContent","attributes","hasChildNodes","allowedTags","firstElementChild","_isBasicCustomElement","childCount","i","expr","_isValidAttribute","lcTag","lcName","_sanitizeAttributes","hookEvent","attrName","attrValue","keepAttr","allowedAttributes","attr","forceKeepAttr","SANITIZE_NAMED_PROPS_PREFIX","getAttributeType","setAttributeNS","_sanitizeShadowDOM","fragment","shadowNode","shadowIterator","nextNode","sanitize","importedNode","returnNode","appendChild","firstChild","nodeIterator","shadowroot","shadowrootmode","serializedHTML","outerHTML","doctype","setConfig","clearConfig","isValidAttribute","tag","addHook","hookFunction","removeHook","removeHooks","removeAllHooks","__webpack_require__"],"sourceRoot":""}